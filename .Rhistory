return(HRVData)
}
}
View(InterpolateNIHR)
function (HRVData, freqhr=4, method = c ("linear", "spline"),
verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData = HandleVerboseArguement(HRVData, verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
View(InterpolateNIHR)
View(InterpolateNIHR)
View(InterpolateNIHR)
InterpolateNIHR(HRVTest)
library(readr)
HRVTest <- read_csv("C:/Users/u6012045/Desktop/HRVTest.csv")
View(HRVTest)
InterpolateNIHR(HRVTest)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
InterpolateNIHR(HRVTest)
InterpolateNIHR(HRVTest, spline)
first = head(HRVData$Beat$Time,1)
method = match.arg(method)
HRVData = HandleVerboseArgument(HRVData, verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData = HandleVerboseArgument(HRVData, verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
InterpolateNIHR(HRVData = HRVTest, freqhr = 2, method = spline)
InterpolateNIHR(HRVData = HRVTest, freqhr = 2, method = spline, Verbose = NULL)
InterpolateNIHR(HRVData = HRVTest, freqhr = 2, method = spline)
InterpolateNIHR(HRVData = HRVTest, freqhr = 2, method = spline, Verbose = NULL)
InterpolateNIHR(HRVTest, freqhr = 2, method = spline, Verbose = NULL)
InterpolateNIHR(HRVTest, freqhr = 2, method = spline)
InterpolateNIHR(HRVTest, freqhr = 2, method = spline)
InterpolateNIHR(HRVTest, freqhr = 2, method = spline)
InterpolateNIHR(HRVTest, freqhr = 2, method = "spline")
InterpolateNIHR(HRVTest, freqhr = 2, method = "spline", FALSE)
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - -
- - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
InterpolateNIHR(HRVTest, freqhr = 2, method = "spline")
InterpolateNIHR(HRVTest, freqhr = 2, method = "spline", FALSE)
InterpolateNIHR(HRVTest, freqhr = 2, method = "spline")
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
limit = 30 # seconds
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData = HandleVerboseArgument(HRVData, verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
InterpolateNIHR(HRVData = HRVTest, freqhr = 4, method = "spline", verbose = NULL)
InterpolateNIHR(HRVData = HRVTest, freqhr = 4, method = "spline", verbose = NULL)
install.packages(c("BH", "crayon", "curl", "dplyr", "httr", "openintro", "openssl", "plotrix", "R6", "Rcpp", "rlang", "scales", "tibble", "tidyr"))
InterpolateNIHR(HRVData = HRVTest, freqhr = 4, method = "spline", verbose = NULL)
InterpolateNIHR(HRVData = HRVTest, freqhr = 4, method = "spline", verbose = NULL)
InterpolateNIHR(HRVData = HRVTest, freqhr = 4, method = "spline", verbose = NULL)
HRVData = HandleVerboseArgument(HRVData, verbose)
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData = HandleVerboseArgument(HRVData, verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
View(InterpolateNIHR)
InterpolateNIHR(HRVTest)
InterpolateNIHR(HRVTest)
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
Verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData = handleVerboseargument(HRVData, Verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
Verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData = handleVerboseargument(HRVData, Verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
VerboseMessage(HRVData$Verbose,
past("Frequency:"), freqhr, "Hz")
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
VerboseMessage(HRVData$Verbose,
paste("Number of beats:", length(HRVData$Beat$niHR)))
VerboseMessage(HRVData$Verbose,
paste("Number of points:", npoints))
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
InterpolateNIHR(HRVTest)
library("RHRV", lib.loc="~/R/win-library/3.3")
library("tseries", lib.loc="~/R/win-library/3.3")
detach("package:tseries", unload=TRUE)
library("tseries", lib.loc="~/R/win-library/3.3")
InterpolateNIHR(HRVTest)
HRVData = HandleVerboseArgument(HRVData, Verbose)
VerboseMessage(HRVData$Verbose,
paste("Interpolating instantaneous heart rate"))
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
Verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
InterpolateNIHR(Verbose)
InterpolateNIHR(HRVTest)
library("RHRV", lib.loc="~/R/win-library/3.3")
install.packages(c("tseries", "curl"))
library("RHRV", lib.loc="~/R/win-library/3.3")
InterpolateNIHR(HRVTest)
install.packages("tibble")
library(readr)
HRVTest <- read_csv("C:/Users/u6012045/Desktop/HRVTest.csv")
View(HRVTest)
InterpolateNIHR(HRVTest)
InterpolateNIHR <-
function (HRVData, freqhr=4, method = c ("linear", "spline"),
verbose = NULL) {
#- - - - - - - - - - - - - - - - - - - - - - - -
#Interpolation Instantaneous Heart Rate
#- - - - - - - - - - - - - - - - - - - -- - - -
#       freqhr -> frequency for interpolating heart rate
#       method -> "linear" interpolation or spline
method = match.arg(method)
HRVData$Freq_HR=freqhr
first = head(HRVData$Beat$Time,1)
last = tail(HRVData$Beat$Time,1)
npoints=as.integer((last-first)*HRVData$Freq_HR+1)
if (method == "linear") {
fun = approxfun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "linear", ties = "ordered")
} else {
fun = splinefun(HRVData$Beat$Time,HRVData$Beat$niHR,
method = "monoH.FC", ties = "ordered")
}
vectorxint=seq(first,last,1/HRVData$Freq_HR)
HRVData$HR=fun(vectorxint)
# limit indicates the maximum width in seconds of an interval without beats
limit = 30 # seconds
# beg and end are the beginning and end of the interval without beats
begindex = which(diff(HRVData$Beat$Time)>limit)
beg = HRVData$Beat$Time[begindex]
end = HRVData$Beat$Time[begindex+1]
# the value of HR in these intervals is set to zero
if (length(begindex) > 0) {
for (i in 1:length(beg)) {
HRVData$HR[vectorxint>beg[i] & vectorxint<end[i]] = 0
warning("interval without beats detected!")
}
}
return(HRVData)
}
InterpolateNIHR(HRVTest)
InterpolateNIHR(HRVTest, freqhr = 2, method = "spline")
InterpolateNIHR(HRVTest, freqhr = 2, method = "spline")
m
m
library("RHRV", lib.loc="~/R/win-library/3.3")
#This code is for Ascii Format
#Set the appropriate file path after setwd()
setwd("H:\\MTBI Sleep Study\\Actiwave and Cognitive\\ACTIWAVE CARDIO\\Final_HRV\\PRE2")
#Run this before each session to generate the data structure
hrv.data = CreateHRVData()
hrv.data = SetVerbose(hrv.data, TRUE)
#Set the appropriate file name as second arguement in load beat askii
hrv.data = LoadBeatAscii(hrv.data, "Example3.txt", "H:\\MTBI Sleep Study\\Actiwave and Cognitive\\ACTIWAVE CARDIO\\Final_HRV\\PRE2", scale = .001)
plot(hrv.data$Beat$Time)
#NIHR is non-interpolated heart rate
#Plot to confirm the right data is being used
hrv.data = BuildNIHR(hrv.data)
PlotNIHR(hrv.data)
#Applies a filter to niHR data---use if you wish
hrv.data.bak = hrv.data
hrv.data = FilterNIHR(hrv.data, long=50, last=10, minbpm=25, maxbpm=180)
PlotNIHR(hrv.data)
